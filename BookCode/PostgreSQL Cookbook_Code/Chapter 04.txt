RECIPE: Controlling automatic database maintenance

autovacuum = on
track_counts = on

ALTER TABLE hrms SET (
  autovacuum_enabled = TRUE, toast.autovacuum_enabled = TRUE
);




RECIPE: Preventing auto freeze and page corruption

SET vacuum_freeze_table_age = 0;
VACUUM;

VACUUM demo;




RECIPE: Preventing transaction ID wraparound failures

$ vacuumdb hrdb




RECIPE: Updating planner statistics

ANALYZE demo;




RECIPE: Dealing with bloating tables and indexes

hrdb=# create schema stats;
hrdb=# create extension pgstattuple with schema stats;

hrdb=# CREATE TABLE num_test AS SELECT *
FROM generate_series(1, 10000);

hrdb=# SELECT * FROM stats.pgstattuple('num_test');

hrdb=# DELETE FROM num_test WHERE generate_series % 2 = 0;

hrdb=# SELECT * FROM stats.pgstattuple('num_test');

hrdb=# VACUUM num_test;

hrdb=# SELECT * FROM stats.pgstattuple('num_test');

hrdb=# SELECT relname, pg_table_size(oid) as index_size, 100-(stats.pgstatindex(relname)).avg_leaf_density AS bloat_ratio
FROM pg_class WHERE relname ~ 'casedemo' AND relkind = 'i';

SELECT
  current_database(), schemaname, tablename, /*reltuples::bigint, relpages::bigint, otta,*/
  ROUND(CASE WHEN otta=0 THEN 0.0 ELSE sml.relpages/otta::numeric END,1) AS tbloat,
  CASE WHEN relpages < otta THEN 0 ELSE bs*(sml.relpages-otta)::bigint END AS wastedbytes,
  iname, /*ituples::bigint, ipages::bigint, iotta,*/
  ROUND(CASE WHEN iotta=0 OR ipages=0 THEN 0.0 ELSE ipages/iotta::numeric END,1) AS ibloat,
  CASE WHEN ipages < iotta THEN 0 ELSE bs*(ipages-iotta) END AS wastedibytes
FROM (
  SELECT
    schemaname, tablename, cc.reltuples, cc.relpages, bs,
    CEIL((cc.reltuples*((datahdr+ma-
      (CASE WHEN datahdr%ma=0 THEN ma ELSE datahdr%ma END))+nullhdr2+4))/(bs-20::float)) AS otta,
    COALESCE(c2.relname,’?’) AS iname, COALESCE(c2.reltuples,0) AS ituples, COALESCE(c2.relpages,0) AS ipages,
    COALESCE(CEIL((c2.reltuples*(datahdr-12))/(bs-20::float)),0) AS iotta -- very rough approximation, assumes all cols
  FROM (
    SELECT
      ma,bs,schemaname,tablename,
      (datawidth+(hdr+ma-(case when hdr%ma=0 THEN ma ELSE hdr%ma END)))::numeric AS datahdr,
      (maxfracsum*(nullhdr+ma-(case when nullhdr%ma=0 THEN ma ELSE nullhdr%ma END))) AS nullhdr2
    FROM (
      SELECT
        schemaname, tablename, hdr, ma, bs,
        SUM((1-null_frac)*avg_width) AS datawidth,
        MAX(null_frac) AS maxfracsum,
        hdr+(
          SELECT 1+count(*)/8
          FROM pg_stats s2
          WHERE null_frac<>0 AND s2.schemaname = s.schemaname AND s2.tablename = s.tablename
        ) AS nullhdr
      FROM pg_stats s, (
        SELECT
          (SELECT current_setting(‘block_size’)::numeric) AS bs,
          CASE WHEN substring(v,12,3) IN (‘8.0’,’8.1’,’8.2’) THEN 27 ELSE 23 END AS hdr,
          CASE WHEN v ~ ‘mingw32’ THEN 8 ELSE 4 END AS ma
        FROM (SELECT version() AS v) AS foo
      ) AS constants
      GROUP BY 1,2,3,4,5
    ) AS foo
  ) AS rs
  JOIN pg_class cc ON cc.relname = rs.tablename
  JOIN pg_namespace nn ON cc.relnamespace = nn.oid AND nn.nspname = rs.schemaname AND nn.nspname <> ‘information_schema’
  LEFT JOIN pg_index i ON indrelid = cc.oid
  LEFT JOIN pg_class c2 ON c2.oid = i.indexrelid
) AS sml
ORDER BY wastedbytes DESC;




RECIPE: Monitoring data and index pages

hrdb=# SELECT * FROM stats.pgstattuple(‘casedemo’);

hrdb=# SELECT schemaname,relname,n_tup_ins,n_tup_upd,n_tup_del,n_live_tup,n_dead_tup,last_autovacuum,last_analyze
from pg_stat_all_tables where relname='casedemo';

SELECT
    relid::regclass AS table, 
    indexrelid::regclass AS index, 
    pg_size_pretty(pg_relation_size(indexrelid::regclass)) AS index_size, 
    idx_tup_read, 
    idx_tup_fetch, 
    idx_scan
FROM pg_stat_user_indexes 
  JOIN pg_index USING (indexrelid) 
 WHERE idx_scan = 0 
AND indisunique IS FALSE;




RECIPE: Routine reindexing

REINDEX INDEX customer_pkey;

REINDEX TABLE CUSTOMER;

REINDEX SYSTEM hrdb;

REINDEX DATABASE hrdb;

CREATE INDEX CONCURRENTLY card_index ON creditcard (cardno);
BEGIN;
DROP INDEX credit_card_idx;
ALTER INDEX card_index RENAME TO credit_card_idx;
COMMIT;




RECIPE: Maintaining log files

logging_collector=true

pg_ctl start | rotatelogs /var/log/pgsql_log 86400